#!/usr/bin/env bash
# memusg -- Measure memory usage of processes
# Usage: memusg COMMAND [ARGS]...
#
# Original Author: Jaeho Shin <netj@sparcs.org> 2010-08-16
# Rewritten by: Jonathan Clark <jhclark@cs.cmu.edu> 2012-03-09
# Changes:
# * Track vmem
# * Write to stderr synchonously instead of spamming the console after the primary process terminates
# * Added some comments
set -um

usage() {
    # Skip the shebang line and print the comment lines before the first empty comment
    # Oh, and uncomment them
    sed -n '2,/^#$/ s/^# //p' < "$0"
    exit 1
}

# check input
[ $# -gt 0 ] || usage

# TODO support more options: peak, footprint, sampling rate, etc.

pgid=`ps -o pgid= $$`
# make sure we're in a separate process group
if [ $pgid = $(ps -o pgid= $(ps -o ppid= $$)) ]; then
    cmd=
    set -- "$0" "$@"
    for a; do cmd+="'${a//"'"/"'\\''"}' "; done
    echo "$a"
    exec bash -i -c "$cmd"
fi

# detect operating system and prepare measurement
case $(uname) in
    Darwin|*BSD)
        get_rss() {
            /bin/ps -o rss= -g $1;
        }
        get_vmem() {
            /bin/ps -o vsize= -g $1;
        }
        ;;
    Linux)
        get_rss() {
            /bin/ps -o rss= -$1;
        }
        get_vmem() {
            /bin/ps -o vsize= -$1;
        }
        ;;
    *) echo "`uname`: unsupported operating system" >&2; exit 2 ;;
esac

# run the given command
"$@" &
childpid=$!

# monitor the memory usage while the program runs in the background
# entirely so that we can capture exit code of childpid
# (otherwise, we'd run in the foreground)
(
  set +x
  pgid=$(ps -o pgid= $childpid)
  peak_rss=0
  peak_vmem=0
  while rss=$(get_rss $pgid); do
    sample_rss=$((${rss/#/+}))
    let peak_rss="sample_rss > peak_rss ? sample_rss : peak_rss"

    vmem=$(get_vmem $pgid)
    sample_vmem=$((${vmem/#/+}))
    let peak_vmem="sample_vmem > peak_vmem ? sample_vmem : peak_vmem"
    sleep 0.1
  done
  echo >&2 "memusg: peak_rss=${peak_rss} kb"
  echo >&2 "memusg: peak_vmem=${peak_vmem} kb"
) &
monpid=$!

# Just hope that we got here before losing the return code
# (The few millis spent launching the monitor process are a race condition)

# Now use wait to get the program's return code
wait $childpid
ecode=$?
wait $monpid
exit $ecode

